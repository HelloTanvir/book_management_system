import {
  ArgumentsHost,
  Catch,
  ExceptionFilter,
  HttpException,
} from '@nestjs/common';
import { ValidationError } from 'class-validator';
import { Response } from 'express';
import { IErrorResponse } from '../types/response.type';

@Catch(HttpException)
export class HttpExceptionFilter implements ExceptionFilter<HttpException> {
  catch(exception: HttpException, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<Response>();

    const status = exception.getStatus();
    let error = exception.getResponse();

    // format validation errors generated by class-validator
    if (Array.isArray(error) && error?.[0] instanceof ValidationError) {
      error = (error as ValidationError[]).reduce(
        (acc, e) => ({
          ...acc,
          [e.property]: Object.values(
            e.constraints as Record<string, string>,
          ).join(', '), // join all constraints into a single string
        }),
        {},
      );
    }

    if (typeof error === 'object') {
      for (const key in error) {
        if (key === 'message') {
          // if error has a message key, delete all other fields and use it as the general error message
          const message = error[key] as string;
          for (const k in error) {
            delete error[k];
          }
          error['general'] = message;
        } else if (Array.isArray(error[key])) {
          // if errors are arrays of strings, convert them to comma-separated strings
          error[key] = Object.values(error[key]).join(', ');
        }
      }
    }

    const errorResponse: IErrorResponse = {
      statusCode: status,
      message: exception.message,
      errors:
        typeof error === 'string'
          ? { general: error }
          : (error as IErrorResponse['errors']),
    };

    response.status(status).json(errorResponse);
  }
}
